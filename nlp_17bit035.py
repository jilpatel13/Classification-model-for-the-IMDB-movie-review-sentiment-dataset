# -*- coding: utf-8 -*-
"""NLP_17BIT035.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/173pte1i33Sl3-TIvRqASNUmqMnqFtDRd
"""

Design Problem-2 NLP

import pandas as pd
import numpy as np

!git clone https://github.com/jilpatel13/Classification-model-for-the-IMDB-movie-review-sentiment-dataset.git

df = pd.read_excel('/content/Classification-model-for-the-IMDB-movie-review-sentiment-dataset/train.xlsx')

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.svm import LinearSVC
from sklearn.metrics import classification_report

df.head()

!pip install git+https://github.com/laxmimerit/preprocess_kgptalkie.git

import preprocess_kgptalkie as ps
import re

def get_clean(x):
    x = str(x).lower().replace('\\', '').replace('_', ' ')
    x = ps.cont_exp(x)
    x = ps.remove_emails(x)
    x = ps.remove_urls(x)
    x = ps.remove_html_tags(x)
    x = ps.remove_rt(x)
    x = ps.remove_accented_chars(x)
    x = ps.remove_special_chars(x)
    x = re.sub("(.)\\1{2,}", "\\1", x)
    return x

df['Reviews'] = df['Reviews'].apply(lambda x: get_clean(x))

df.head()

tfidf = TfidfVectorizer(max_features=5000)

X = df['Reviews']
y = df['Sentiment']

X = tfidf.fit_transform(X)

X

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

clf = LinearSVC()
clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)

print(classification_report(y_test, y_pred))

x = 'this movie is really good. thanks a lot for making it'

x = get_clean(x)
vec = tfidf.transform([x])

clf.predict(vec)